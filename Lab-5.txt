1. What is the output of \dt?
The \dt command generates a “List of relations” table in human readable format.  Essentially, the table lists the name of tables in the db, the type of table, and the owner of the table.  This is a useful command because you can see at one glance the amount of tables in the database along with their respective titles (Name).

2. What is the schema for the customer table?
See attached .png file.  Briefly though, the schema indicates that there are ten columns of varying types including INTEGER, SMALLINT, CHARACTER VARYING, BOOLEAN, DATE AND TIMESTAMP WITHOUT TIME ZONE.  There are also four Indexes on this table and a couple of Foreign-key constraints.  

3. What similarities do you see in the explain plans for these 3 queries? (Projection and Projection and Selection)
The main similarities between the three queries are that a Sequential Scan is used to look up the results in all three cases (no indexes are used).  Also, there is zero startup cost associated with all of the queries.  

4. What is the difference between the plans for the Partitioned table and the union query? Why do you think this difference exists?
The biggest noticeable difference between the two explain plans are the startup costs associated with each query.  Because the first query merges two tables and then queries the view of that merge, it must perform to HashAggregate functions, which is costly in terms of query speed.  The Partition Table query, on the other hand, is using a pre-defined Partition to filter out any undesirable results before the Seq Scan starts looking for the answer.  Running the query this way significantly reduces the speed of search. 

5. What Join algorithm is used for the inner join?
Common Join algorithms include: Nested-Loop Join, Index Join, Sort-Merge Join, and Hash Join.  The algorithm used for this query was a Hash Join, which is one of the most efficient algorithms in search processing because it reduces the number of unnecessary comparisons and allows for the decentralization of one large join operation into smaller more manageable joins.  